/*
 * RoadPassion CONFIDENTIAL
 *
 * Copyright 2013 RoadPassion Electronics Co., Ltd.
 *
 * DO NOT COPY AND/OR REDISTRIBUTE WITHOUT PERMISSION.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#ifndef DRVGPIO_H_
#define DRVGPIO_H_

#include <Driver.h>

struct ResGPIO {
	uint32_t	RCC_APBPeriph_NUM;
	GPIO_TypeDef*	GPIO_Port;
	uint16_t	GPIO_Pin;
	bool Direction; //out :true.  in: false.
};

class DrvGPIO : public Driver {
public:
	DrvGPIO(ResGPIO *resGPIO,bool activeLevel=true);
	virtual ~DrvGPIO();
	int init(void);
	void on(void);
	void off(void);
	void setActiveLevel(bool l);
	bool getValue(void);
private:
	ResGPIO *_res;
	bool _activeLevel;
};

#endif /* DRVGPIO_H_ */
